@model RecruitingPortal.Models.GuardRequestViewModel
@using RecruitingPortal.Domain
@{
    //ref: http://www.mikesdotnetting.com/article/164/nested-layout-pages-with-razor
    Layout = "~/Views/Shared/_LayoutSub.cshtml";

    if (ViewData["PageMode"] == null)
    {
        ViewData["PageMode"] = PageMode.EDIT;
    }
    var pageMode = (PageMode)Enum.Parse(typeof(PageMode), ViewData["PageMode"].ToString());

    var buttonLabel = string.Empty;
    if (pageMode == PageMode.CREATE)
    {
        buttonLabel = "REQUEST GUARD";
        ViewBag.Title = "Request guard";
    }
    else
    {
        buttonLabel = "EDIT REUEST GUARD";
        ViewBag.Title = "Edit Request Guard";
    }
}

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

<!-- TinyMCE Script Reference -->
<script src="~/scripts/tinymce/tinymce.min.js"></script>

<!-- Script to wire up your TinyMCE editor -->
<script type="text/javascript">
    // Initialize your tinyMCE Editor with your preferred options
    tinyMCE.init({
        // General options
        // mode: "textareas",
        theme: "modern",
        // Theme options
        theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect",
        theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
        theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
        theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,spellchecker,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,blockquote,pagebreak,|,insertfile,insertimage",
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_statusbar_location: "bottom",
        theme_advanced_resizing: false

        // Example content CSS (should be your site CSS)
        // content_css: "css/example.css"
    });
</script>

<div id="rsPageContentWrap">
    <h3>
        @if (pageMode == PageMode.CREATE)
        {
            @Html.Raw("Request Guard");
        }
        else
        {
            @Html.Raw("Edit Request Guard");
        }
    </h3>
    <div class="rsBackCard">
        <div class="col-xs-12">
            <div class="rsBlockWrap">
                <div>
                    <div class="rsMsgWrap">
                        <div class="rsCircle rsWarn">
                            <i class="fas fa-check"></i>
                        </div>
                        Once a guard is requested, it will notify HR so that they can create a job online.
                    </div>
                    <!--<div class="alert alert-success">
                        <ul class="fa-ul">
                            <li>
                                <i class="fa fa-check-square-o fa-lg fa-li"></i>
                                Once a guard is requested, it will notify HR so that they can create a job online.
                            </li>
                        </ul>
                    </div>-->

                    

                    <div>
                        <div class="rsTitleBlue">
                            Request Information Detail
                            <p class="pull-right">
                                <i class="fas fa-chevron-left"></i>
                                @Html.ActionLink("Back to Request List", "Index", "ServiceTeam")
                            </p>
                        </div>
                        <div class="panel-body">
                            @using (Html.BeginForm("CreateOrEditGuardRequest", "ServiceTeam", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("PageMode", ViewData["PageMode"]);

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        <div class="row">
                            @Html.LabelFor(model => model.TypeOfPositions, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.TypeOfPositionId, Model.TypeOfPositions, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.TypeOfPositionId, "Please select position", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div>&nbsp;</div>
                        <div class="row">
                            @Html.LabelFor(model => model.TypeOfServices, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.TypeOfServiceId, Model.TypeOfServices, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.TypeOfServiceId, "Please select service type", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div>&nbsp;</div>
                        <div class="row">
                            @Html.LabelFor(model => model.ServiceLocation, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-6">
                                @Html.TextBoxFor(model => model.ServiceLocation, new { @class = "form-control", placeholder = "Service Location" })
                                @Html.ValidationMessageFor(model => model.ServiceLocation, "Please type service location", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div>&nbsp;</div>
                        <div class="row">
                            @Html.Label("Type of work", htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-10">
                                @* ref: http://stackoverflow.com/questions/16688170/asp-net-mvc-html-checkboxfor *@

                                @for (int i = 0; i < Model.CheckBoxListTypeOfWork.Count; i++)
            {
                    @Html.CheckBoxFor(model => model.CheckBoxListTypeOfWork[i].Checked, new { id = "CheckBoxListTypeOfWork_" + i })
                    @Html.Raw("&nbsp;&nbsp;")
                    @Html.HiddenFor(model => model.CheckBoxListTypeOfWork[i].Id)
                    @Html.DisplayFor(m => m.CheckBoxListTypeOfWork[i].Text)
                    @Html.Raw("&nbsp;&nbsp;&nbsp;&nbsp;")
}

                                @Html.ValidationMessageFor(model => model.CheckBoxListTypeOfWork, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div>&nbsp;</div>
                        <div class="row">

                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-10">
                                <!--
                note: TextBoxFor does not work with ValidationMessageFor
                ref: http://stackoverflow.com/questions/10294699/jquery-validate-unobtrusive-is-not-working-for-textarea

                note: TinyMCE
                ref: http://www.codeproject.com/Articles/830925/Integrating-TinyMCE-into-an-MVC-Project
            -->
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @id = "jobDescription", @rows = 7 } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div>&nbsp;</div>
                        <div class="row">

                            @Html.LabelFor(model => model.SpecialRemark, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-10">

                                @Html.EditorFor(model => model.SpecialRemark, new { htmlAttributes = new { @class = "form-control", @id = "specialRemark", @rows = 3 } })
                            </div>
                        </div>
                        <div>&nbsp;</div>
                        <div class="row">
                            @Html.LabelFor(model => model.BranchOffices, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.BranchAddressId, Model.BranchOffices, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.BranchAddressId, "Please select office", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-6">
                                <span id="spanAddress"></span>
                            </div>
                        </div>
                        <div>&nbsp;</div>
                        <div class="row">
                            @Html.LabelFor(model => model.StaffTeams, htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.StaffTeamId, Model.StaffTeams, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.StaffTeamId, "Please select office", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div>&nbsp;</div>
                        <div class="row">
                            <div class="col-md-12">
                                <button type="submit" class="btn rsBtnDefault pull-right">@buttonLabel</button>
                            </div>
                        </div>
                    </div>
}
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<script type="text/jscript">
    $(document).ready(function () {
        $('#BranchAddressId').change(function () {
            var branchId = $("#BranchAddressId option:selected").val();
            if (branchId == "" || branchId == null || branchId < 1) {
                $("#spanAddress").text("");
                return;
            }

            $.ajax({
                url: "@Url.Action("GetBranchAddress", "ServiceTeam")",
                dataType: "json",
                type: "GET",
                cache: false,
                data: {
                    Id: branchId
                },
                success: function (returnData) {
                    if (returnData.success != undefined && returnData.success == false) {
                        alert('failed');
                    }
                    else {
                        // console.log(returnData);
                        var fullAddress = returnData.Address1;
                        if (returnData.Address2 != '' && returnData.Address2 != null) {
                            fullAddress += ' ' + returnData.Address2;
                        }
                        fullAddress += ' ' + returnData.city.City1;
                        fullAddress += ' ' + returnData.city.Region.Code;
                        fullAddress += ' ' + returnData.PostalCode;

                        var linkFullAddress = "<a href='#mapcontainer' class='mapToShowGoogle' id='" + returnData.city.City1 + "|" + returnData.city.Region.Region1 + "|" + returnData.PostalCode + "'>";
                        linkFullAddress += "<i class='glyphicon glyphicon-map-marker'></i>";
                        linkFullAddress += fullAddress;
                        linkFullAddress += "</a>";
                        $("#spanAddress").html(linkFullAddress);
                    }
                },
                error: function (request, status, error) {
                    fancyAlert("Status:" + status + " Error Thrown: " + error);
                }
            });


        });

        $("body").on("click", ".mapToShowGoogle", function (e) {
            e.preventDefault();

            $("a.mapToShowGoogle").fancybox({
                'width': 800,
                'height': 500,
                'hideOnContentClick': false, // so you can handle the map
                'overlayColor': '#ccffee',
                'overlayOpacity': 0.8,
                'autoDimensions': true, // the selector #mapcontainer HAS css width and height
                'beforeShow': function () {
                    var array = this.element[0].id.split("|");
                    var city = array[0]; // city name
                    var province = array[1]; // province name
                    var postalCode = array[2]; // postal code

                    var cityProvince = city + "," + province;

                    initialize(cityProvince, postalCode);
                    google.maps.event.trigger(map, "resize");
                    // codeAddress("M6h 2w9");
                    $("#fancybox-close").css({ "opacity": 0.5 });
                },
                'onCleanup': function () {
                    var myContent = this.href;
                    $(myContent).unwrap();
                } // fixes inline bug
            });
        });

    }); // end of document loading

    // ref: http://stackoverflow.com/questions/12554688/how-to-dynamically-change-the-centre-of-a-google-maps-without-erasing-markers
    // ref: https://developers.google.com/maps/documentation/javascript/examples/geocoding-simple
    // note: above two concepts have been used and merged together for proper use
    function initialize(cityProvince, postalCode) {
        var mapDiv = document.getElementById('map_canvas');

        // addressParam can be eithere address or postal code
        // TODO: if case postalCode is not valid, check with cityProvince which is not being used for now.
        var address = postalCode;
        geocoder = new google.maps.Geocoder();

        // Get LatLng information by name
        geocoder.geocode({
            "address": address
        }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map = new google.maps.Map(mapDiv, {
                    // Center map (but check status of geocoder)
                    center: results[0].geometry.location,
                    zoom: 15,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });

                map.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location
                });
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }
</script>
